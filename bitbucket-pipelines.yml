#  Template .NET Core build

#  This template allows you to validate your .NET Core package.
#  The workflow allows running tests and code linting on the default branch.

image: mcr.microsoft.com/dotnet/core/sdk:3.1

pipelines:
  branches:
    master:
      - step:
          name: Deploy backend
          caches:
            - dotnetcore
          script:
            - apt-get update && apt-get install -y zip 
            - cd backend/LetsMeatAPI
            - dotnet restore
            - dotnet build --no-restore --configuration Release
            - dotnet publish --no-restore --no-build --configuration Release
            - cd bin/Release/netcoreapp3.1/publish/
            - zip -r ../letsmeatapi.zip *
            - cd ..
            - curl -u wreplin:${AZURE_DEPLOYMENT_PASSWORD} --data-binary @letsmeatapi.zip https://letsmeatapi.scm.azurewebsites.net/api/zipdeploy
  default:
    - parallel:
        - step:
            name: Build and Test backend
            caches:
              - dotnetcore
            script:
              - cd backend/LetsMeatAPITests
              - REPORTS_PATH=./test-reports/build_${BITBUCKET_BUILD_NUMBER}
              - dotnet restore
              - dotnet build --no-restore --configuration Release
              - dotnet test --no-build --configuration Release --test-adapter-path:.
        - step:
            name: Lint the backend code
            caches:
              - dotnetcore
            script:
              - cd backend/LetsMeatAPI
              - export SOLUTION_NAME=LetsMeatAPI
              - export REPORTS_PATH=linter-reports
              - dotnet new tool-manifest
              - dotnet tool install JetBrains.ReSharper.GlobalTools
              - dotnet tool restore
              - dotnet jb inspectcode ${SOLUTION_NAME}.sln --output="${REPORTS_PATH}/jb-${BITBUCKET_BUILD_NUMBER}.xml"
            artifacts:
              - linter-reports/**
